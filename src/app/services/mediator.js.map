{"version":3,"sources":["../../../../src/app/services/mediator.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAsC,MAAO,eAAA,CAAgB;AACtE,OAAO,EAAE,SAAA,EAAU,MAAO,cAAA,CAAA;AAI1B;IAII,kBAAoB,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;QACpC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QAClE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;IAChD,CAAC;IAED,4BAAS,GAAT,UAAU,OAAe,EAAE,EAAY;QACnC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAC1C,CAAC;IAED,0BAAO,GAAP,UAAQ,OAAe,EAAE,IAAS;QAC9B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED,8BAAW,GAAX,UAAY,OAAe,EAAE,EAAY;QACrC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAC5C,CAAC;IAED,iCAAc,GAAd;QACI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;IAC5B,CAAC;IASL,eAAC;AAAD,CAhCA,AAgCC;;AAPM,mBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,uBAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,SAAS,GAAG;CAClB,EAF6F,CAE7F,CAAC","file":"mediator.js","sourceRoot":"","sourcesContent":["import { Injectable, ChangeDetectorRef, NgZone } from '@angular/core';\r\nimport { WindowRef } from './window-ref'\r\nimport * as _ from 'lodash';\r\n\r\n\r\nexport class Mediator {\r\n    private _mediator: any\r\n    public moduleName: string;\r\n\r\n    constructor(private windowRef: WindowRef) {\r\n        this._mediator = this.windowRef.nativeWindow.parent.getMediator();\r\n        this.moduleName = this._mediator.moduleName;\r\n    }\r\n\r\n    subscribe(channel: string, fn: Function) {\r\n        this._mediator.subscribe(channel, fn);\r\n    }\r\n\r\n    publish(channel: string, data: any) {\r\n        this._mediator.publish(channel, data);\r\n    }\r\n\r\n    unsubscribe(channel: string, fn: Function) {\r\n        this._mediator.unsubscribe(channel, fn);\r\n    }\r\n\r\n    unsubscribeAll() {\r\n        this._mediator.remove();\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: WindowRef, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}