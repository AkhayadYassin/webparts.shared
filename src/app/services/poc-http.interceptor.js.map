{"version":3,"sources":["../../../../src/app/services/poc-http.interceptor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAO,MAAO,iBAAA,CAAkB;AAEzC,OAAO,EAAE,QAAA,EAAS,MAAO,YAAA,CAAa;AACtC,OAAO,EAAE,UAAA,EAAW,MAAO,MAAA,CAAO;AAGlC;IACI,4BAAoB,MAAc,EAAU,QAAiB;QAAzC,WAAM,GAAN,MAAM,CAAQ;QAAU,aAAQ,GAAR,QAAQ,CAAS;IAAI,CAAC;IAClE,sCAAS,GAAT,UAAU,GAAqB,EAAE,IAAiB;QAAlD,iBAUC;QATG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,UAAC,KAAwB;YACnD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnB,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBACvB,KAAI,CAAC,SAAS,EAAE,CAAC;YACrB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,KAAI,CAAC,mBAAmB,EAAE,CAAA;YAC9B,CAAC;YACD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sCAAS,GAAT;QACI,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAC,WAAW,CAAC,CAAC;QAC5C,4BAA4B;QAC5B,iCAAiC;QACjC,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IAC9B,CAAC;IAED,gDAAmB,GAAnB;QACI,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAC,sBAAsB,CAAC,CAAC;QACvD,yCAAyC;QACzC,iCAAiC;QACjC,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IAC9B,CAAC;IASL,yBAAC;AAAD,CArCA,AAqCC;;AARM,6BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,iCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,MAAM,GAAG;IAChB,EAAC,IAAI,EAAE,QAAQ,GAAG;CACjB,EAH6F,CAG7F,CAAC","file":"poc-http.interceptor.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpErrorResponse } from '@angular/common/http';\r\nimport { Mediator } from './mediator';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\nexport class PocHttpInterceptor implements HttpInterceptor {\r\n    constructor(private router: Router, private mediator:Mediator) { }\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(req).catch((error: HttpErrorResponse) => {\r\n            console.log(error);\r\n            if (error.status === 403) {\r\n                this.forbidden();\r\n            } else {\r\n                this.redirectToErrorPage()\r\n            }\r\n            return Observable.throw('Server-side error occured');\r\n        });\r\n    }\r\n\r\n    forbidden() {\r\n        let self = this;\r\n        self.mediator.publish(\"errors\",\"Verboden!\");\r\n        // console.log('verboden!');\r\n        // self.router.navigate(['404']);\r\n        return Observable.empty();\r\n    }\r\n\r\n    redirectToErrorPage() {\r\n        let self = this;\r\n        self.mediator.publish(\"errors\",\" ERROR --> REDIRECT!\");\r\n        // console.log('fout en redirect naar!');\r\n        // self.router.navigate(['404']);\r\n        return Observable.empty();\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n{type: Mediator, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}